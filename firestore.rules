rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isValidFuture(ts) {
      return ts > request.time;
    }

    function hasValidQrSession(nonce, schoolId) {
      return exists(/databases/$(database)/documents/qrSessions/$(nonce)) &&
        get(/databases/$(database)/documents/qrSessions/$(nonce)).data.schoolId == schoolId &&
        isValidFuture(get(/databases/$(database)/documents/qrSessions/$(nonce)).data.expiresAt);
    }
    // Visitor check-in guarded by qrSessions
    match /visitors/{id} {
      allow create: if
        request.resource.data.keys().hasOnly([
          'visitorName','visitorType','mobileNumber','email','visitPurpose','hostPerson','hostDepartment','status','checkInTime','createdAt','schoolId','qrNonce','visitorId','checkOutTime','visitDate'
        ]) &&
        request.resource.data.visitorType in ['current','prebooked'] &&
        (request.resource.data.status == 'checked-in' || request.resource.data.status == 'pending') &&
        (request.resource.data.schoolId is string) &&
        (request.resource.data.qrNonce is string) &&
        hasValidQrSession(request.resource.data.qrNonce, request.resource.data.schoolId);

      allow read, update, delete: if request.auth != null;
    }

    // QR sessions: only privileged writers (simplified: any authed user; tighten as needed)
    match /qrSessions/{nonce} {
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }
    match /mindmaps/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if false;
      allow delete: if false;
    }

    match /flowchart/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if false;
      allow delete: if false;
    }

    match /circular/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if false;
      allow delete: if false;
    }

    match /errorQuestions/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
    }

    match /test/{document} {
      allow read: if true;
    }

    match /testResults/{document} {
      allow read: if true;
      allow delete: if false;
    }

    match /assignments/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }

    match /assignmentSubmission/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }

    match /majorSubject/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /markedAnswers/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if true;
    }

    match /conversation/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /messages/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /sample/{parent}/answer1/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /{path=**}/answer1/{document} {
      allow read: if true;
    }


    match /sample/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /testResult/{parent}/studentAnswer/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /{path=**}/studentAnswer/{document} {
      allow read: if true;
    }


    match /conceptSummary/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /glossary/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /mnemonics/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /studyGuide/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /lessonPerformance/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /resourceProvider/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /personalNotes/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /admin/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /flashCards/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /shortNotes/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /completeTestResults/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /category/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /subCategory/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /studentAnswers/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /courses/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /questionCollection/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /test/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /testResult/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /ff_user_push_notifications/{document} {
      allow create: if /databases/$(database)/documents/users/$(request.auth.uid) == request.resource.data.sender;
      allow read: if false;
      allow write: if false;
      allow delete: if false;
    }

    match /chapters/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /comments/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /lessons/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /branches/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /classes/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /contents/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /school/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /students/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /parents/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /subjects/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    match /teachers/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }
    
     match /groupChats/{document} {
      allow create: if true;
      allow read: if true;
      allow write: if true;
      allow delete: if false;
    }

    // Canteen Management - Menu Collection
    match /canteenMenu/{document} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // Canteen Management - Orders Collection
    match /canteenOrders/{document} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // Diary Management - Homework Collection
    match /homework/{document} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // Diary Management - Remarks Collection
    match /remarks/{document} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }

    match /{document=**} {
      allow read, write: if request.auth.token.email.matches("firebase@flutterflow.io");
    }

    match /users/{document} {
      allow create: if request.auth.uid == document;
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow delete: if request.auth != null;
    }


    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2026, 6, 13);
    }
  }
}